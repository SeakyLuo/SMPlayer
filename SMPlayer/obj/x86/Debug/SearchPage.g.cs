#pragma checksum "C:\Users\Seaky\source\repos\SMPlayer\SMPlayer\SearchPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "FA04DC5083F8A58256487FDDA00BB1C2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMPlayer
{
    partial class SearchPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_SMPlayer_PlaylistControl_ItemsSource(global::SMPlayer.PlaylistControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SearchPage_obj9_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISearchPage_Bindings
        {
            private global::SMPlayer.Models.Playlist dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj9;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.Image obj16;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj12TextDisabled = false;
            private static bool isobj13TextDisabled = false;
            private static bool isobj16SourceDisabled = false;

            private SearchPage_obj9_BindingsTracking bindingsTracking;

            public SearchPage_obj9_Bindings()
            {
                this.bindingsTracking = new SearchPage_obj9_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 191 && columnNumber == 41)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 198 && columnNumber == 41)
                {
                    isobj13TextDisabled = true;
                }
                else if (lineNumber == 168 && columnNumber == 45)
                {
                    isobj16SourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 9: // SearchPage.xaml line 150
                        this.obj9 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.UserControl)target);
                        break;
                    case 12: // SearchPage.xaml line 186
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13: // SearchPage.xaml line 194
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 16: // SearchPage.xaml line 165
                        this.obj16 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj9.Target as global::Windows.UI.Xaml.Controls.UserControl).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::SMPlayer.Models.Playlist) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // ISearchPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SMPlayer.Models.Playlist)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SMPlayer.Models.Playlist obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_Songs(obj.Songs, phase);
                        this.Update_DisplayItem(obj.DisplayItem, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 186
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                    }
                }
            }
            private void Update_Songs(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Songs(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Songs_Count(obj.Count, phase);
                    }
                }
            }
            private void Update_Songs_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 194
                    if (!isobj13TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, (global::System.String)this.LookupConverter("SongCountConverter").Convert(obj, typeof(global::System.String), null, null), null);
                    }
                }
            }
            private void Update_DisplayItem(global::SMPlayer.MusicDisplayItem obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_DisplayItem_Thumbnail(obj.Thumbnail, phase);
                }
            }
            private void Update_DisplayItem_Thumbnail(global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 165
                    if (!isobj16SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj16, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SearchPage_obj9_BindingsTracking
            {
                private global::System.WeakReference<SearchPage_obj9_Bindings> weakRefToBindingObj; 

                public SearchPage_obj9_BindingsTracking(SearchPage_obj9_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SearchPage_obj9_Bindings>(obj);
                }

                public SearchPage_obj9_Bindings TryGetBindingObject()
                {
                    SearchPage_obj9_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Songs(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj9_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SMPlayer.Models.Playlist obj = sender as global::SMPlayer.Models.Playlist;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_Songs(obj.Songs, DATA_CHANGED);
                                bindings.Update_DisplayItem(obj.DisplayItem, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Songs":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Songs(obj.Songs, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DisplayItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DisplayItem(obj.DisplayItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::SMPlayer.Models.Playlist obj)
                {
                    SearchPage_obj9_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Songs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj9_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Songs(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj9_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>;
                if (obj != null)
                {
                    bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> cache_Songs = null;
                public void UpdateChildListeners_Songs(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj)
                {
                    if (obj != cache_Songs)
                    {
                        if (cache_Songs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Songs).PropertyChanged -= PropertyChanged_Songs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Songs).CollectionChanged -= CollectionChanged_Songs;
                            cache_Songs = null;
                        }
                        if (obj != null)
                        {
                            cache_Songs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Songs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Songs;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SearchPage_obj29_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISearchPage_Bindings
        {
            private global::System.String dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj29;
            private global::Windows.UI.Xaml.Controls.TextBlock obj30;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj30TextDisabled = false;

            public SearchPage_obj29_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 80 && columnNumber == 37)
                {
                    isobj30TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 29: // SearchPage.xaml line 63
                        this.obj29 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.StackPanel)target);
                        break;
                    case 30: // SearchPage.xaml line 74
                        this.obj30 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj29.Target as global::Windows.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::System.String) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // ISearchPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::System.String)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // SearchPage.xaml line 74
                    if (!isobj30TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj30, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SearchPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISearchPage_Bindings
        {
            private global::SMPlayer.SearchPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.StackPanel obj3;
            private global::Windows.UI.Xaml.Controls.StackPanel obj4;
            private global::Windows.UI.Xaml.Controls.StackPanel obj5;
            private global::Windows.UI.Xaml.Controls.StackPanel obj6;
            private global::Windows.UI.Xaml.Controls.ListView obj7;
            private global::SMPlayer.IconTextButton obj20;
            private global::SMPlayer.PlaylistControl obj21;
            private global::SMPlayer.IconTextButton obj22;
            private global::Windows.UI.Xaml.Controls.ListView obj23;
            private global::SMPlayer.IconTextButton obj26;
            private global::Windows.UI.Xaml.Controls.ListView obj27;
            private global::SMPlayer.IconTextButton obj31;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5VisibilityDisabled = false;
            private static bool isobj6VisibilityDisabled = false;
            private static bool isobj7ItemsSourceDisabled = false;
            private static bool isobj20VisibilityDisabled = false;
            private static bool isobj21ItemsSourceDisabled = false;
            private static bool isobj22VisibilityDisabled = false;
            private static bool isobj23ItemsSourceDisabled = false;
            private static bool isobj26VisibilityDisabled = false;
            private static bool isobj27ItemsSourceDisabled = false;
            private static bool isobj31VisibilityDisabled = false;

            private SearchPage_obj1_BindingsTracking bindingsTracking;

            public SearchPage_obj1_Bindings()
            {
                this.bindingsTracking = new SearchPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 44 && columnNumber == 25)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 86 && columnNumber == 39)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 111 && columnNumber == 39)
                {
                    isobj5VisibilityDisabled = true;
                }
                else if (lineNumber == 130 && columnNumber == 39)
                {
                    isobj6VisibilityDisabled = true;
                }
                else if (lineNumber == 146 && columnNumber == 21)
                {
                    isobj7ItemsSourceDisabled = true;
                }
                else if (lineNumber == 141 && columnNumber == 25)
                {
                    isobj20VisibilityDisabled = true;
                }
                else if (lineNumber == 128 && columnNumber == 21)
                {
                    isobj21ItemsSourceDisabled = true;
                }
                else if (lineNumber == 122 && columnNumber == 25)
                {
                    isobj22VisibilityDisabled = true;
                }
                else if (lineNumber == 102 && columnNumber == 21)
                {
                    isobj23ItemsSourceDisabled = true;
                }
                else if (lineNumber == 97 && columnNumber == 25)
                {
                    isobj26VisibilityDisabled = true;
                }
                else if (lineNumber == 59 && columnNumber == 21)
                {
                    isobj27ItemsSourceDisabled = true;
                }
                else if (lineNumber == 55 && columnNumber == 25)
                {
                    isobj31VisibilityDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // SearchPage.xaml line 44
                        this.obj3 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 4: // SearchPage.xaml line 86
                        this.obj4 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 5: // SearchPage.xaml line 111
                        this.obj5 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 6: // SearchPage.xaml line 130
                        this.obj6 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 7: // SearchPage.xaml line 143
                        this.obj7 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 20: // SearchPage.xaml line 136
                        this.obj20 = (global::SMPlayer.IconTextButton)target;
                        break;
                    case 21: // SearchPage.xaml line 124
                        this.obj21 = (global::SMPlayer.PlaylistControl)target;
                        break;
                    case 22: // SearchPage.xaml line 117
                        this.obj22 = (global::SMPlayer.IconTextButton)target;
                        break;
                    case 23: // SearchPage.xaml line 99
                        this.obj23 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 26: // SearchPage.xaml line 92
                        this.obj26 = (global::SMPlayer.IconTextButton)target;
                        break;
                    case 27: // SearchPage.xaml line 57
                        this.obj27 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 31: // SearchPage.xaml line 50
                        this.obj31 = (global::SMPlayer.IconTextButton)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ISearchPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SMPlayer.SearchPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SMPlayer.SearchPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Artists(obj.Artists, phase);
                        this.Update_Albums(obj.Albums, phase);
                        this.Update_Songs(obj.Songs, phase);
                        this.Update_Playlists(obj.Playlists, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_PlaylistsViewAll(obj.PlaylistsViewAll, phase);
                        this.Update_SongsViewAll(obj.SongsViewAll, phase);
                        this.Update_AlbumsViewAll(obj.AlbumsViewAll, phase);
                        this.Update_ArtistsViewAll(obj.ArtistsViewAll, phase);
                    }
                }
            }
            private void Update_Artists(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Artists(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Artists_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // SearchPage.xaml line 57
                    if (!isobj27ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj27, obj, null);
                    }
                }
            }
            private void Update_Artists_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 44
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Albums(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Albums(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Albums_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // SearchPage.xaml line 99
                    if (!isobj23ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj23, obj, null);
                    }
                }
            }
            private void Update_Albums_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 86
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Songs(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Songs(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Songs_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 124
                    if (!isobj21ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_SMPlayer_PlaylistControl_ItemsSource(this.obj21, obj, null);
                    }
                }
            }
            private void Update_Songs_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 111
                    if (!isobj5VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Playlists(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Playlists(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Playlists_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // SearchPage.xaml line 143
                    if (!isobj7ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj7, obj, null);
                    }
                }
            }
            private void Update_Playlists_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 130
                    if (!isobj6VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj6, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_PlaylistsViewAll(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // SearchPage.xaml line 136
                    if (!isobj20VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj20, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_SongsViewAll(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // SearchPage.xaml line 117
                    if (!isobj22VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj22, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_AlbumsViewAll(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // SearchPage.xaml line 92
                    if (!isobj26VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj26, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ArtistsViewAll(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // SearchPage.xaml line 50
                    if (!isobj31VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj31, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SearchPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<SearchPage_obj1_Bindings> weakRefToBindingObj; 

                public SearchPage_obj1_BindingsTracking(SearchPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SearchPage_obj1_Bindings>(obj);
                }

                public SearchPage_obj1_Bindings TryGetBindingObject()
                {
                    SearchPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_Artists(null);
                    UpdateChildListeners_Albums(null);
                    UpdateChildListeners_Songs(null);
                    UpdateChildListeners_Playlists(null);
                }

                public void PropertyChanged_Artists(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Artists_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Artists_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Artists(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                if (obj != null)
                {
                    bindings.Update_Artists_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::System.String> cache_Artists = null;
                public void UpdateChildListeners_Artists(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj)
                {
                    if (obj != cache_Artists)
                    {
                        if (cache_Artists != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Artists).PropertyChanged -= PropertyChanged_Artists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Artists).CollectionChanged -= CollectionChanged_Artists;
                            cache_Artists = null;
                        }
                        if (obj != null)
                        {
                            cache_Artists = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Artists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Artists;
                        }
                    }
                }
                public void PropertyChanged_Albums(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Albums_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Albums_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Albums(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView>;
                if (obj != null)
                {
                    bindings.Update_Albums_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> cache_Albums = null;
                public void UpdateChildListeners_Albums(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj)
                {
                    if (obj != cache_Albums)
                    {
                        if (cache_Albums != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Albums).PropertyChanged -= PropertyChanged_Albums;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Albums).CollectionChanged -= CollectionChanged_Albums;
                            cache_Albums = null;
                        }
                        if (obj != null)
                        {
                            cache_Albums = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Albums;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Albums;
                        }
                    }
                }
                public void PropertyChanged_Songs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Songs(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>;
                if (obj != null)
                {
                    bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> cache_Songs = null;
                public void UpdateChildListeners_Songs(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj)
                {
                    if (obj != cache_Songs)
                    {
                        if (cache_Songs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Songs).PropertyChanged -= PropertyChanged_Songs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Songs).CollectionChanged -= CollectionChanged_Songs;
                            cache_Songs = null;
                        }
                        if (obj != null)
                        {
                            cache_Songs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Songs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Songs;
                        }
                    }
                }
                public void PropertyChanged_Playlists(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Playlists_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Playlists_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Playlists(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist>;
                if (obj != null)
                {
                    bindings.Update_Playlists_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> cache_Playlists = null;
                public void UpdateChildListeners_Playlists(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> obj)
                {
                    if (obj != cache_Playlists)
                    {
                        if (cache_Playlists != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Playlists).PropertyChanged -= PropertyChanged_Playlists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Playlists).CollectionChanged -= CollectionChanged_Playlists;
                            cache_Playlists = null;
                        }
                        if (obj != null)
                        {
                            cache_Playlists = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Playlists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Playlists;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // SearchPage.xaml line 41
                {
                    this.NoResultPanel = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 7: // SearchPage.xaml line 143
                {
                    this.SearchPlaylistView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.SearchPlaylistView).ItemClick += this.SearchPlaylistView_ItemClick;
                }
                break;
            case 9: // SearchPage.xaml line 150
                {
                    global::Windows.UI.Xaml.Controls.UserControl element9 = (global::Windows.UI.Xaml.Controls.UserControl)(target);
                    ((global::Windows.UI.Xaml.Controls.UserControl)element9).PointerEntered += this.DataTemplate_PointerEntered;
                    ((global::Windows.UI.Xaml.Controls.UserControl)element9).PointerExited += this.DataTemplate_PointerExited;
                }
                break;
            case 14: // SearchPage.xaml line 175
                {
                    global::Windows.UI.Xaml.Controls.Button element14 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element14).Click += this.PlayAllButton_Click;
                }
                break;
            case 15: // SearchPage.xaml line 180
                {
                    global::Windows.UI.Xaml.Controls.Button element15 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element15).Click += this.AddToButton_Click;
                }
                break;
            case 20: // SearchPage.xaml line 136
                {
                    global::SMPlayer.IconTextButton element20 = (global::SMPlayer.IconTextButton)(target);
                    ((global::SMPlayer.IconTextButton)element20).Tapped += this.ViewAllButton_Tapped;
                }
                break;
            case 21: // SearchPage.xaml line 124
                {
                    this.SearchMusicView = (global::SMPlayer.PlaylistControl)(target);
                }
                break;
            case 22: // SearchPage.xaml line 117
                {
                    global::SMPlayer.IconTextButton element22 = (global::SMPlayer.IconTextButton)(target);
                    ((global::SMPlayer.IconTextButton)element22).Tapped += this.ViewAllButton_Tapped;
                }
                break;
            case 23: // SearchPage.xaml line 99
                {
                    this.SearchAlbumView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.SearchAlbumView).ItemClick += this.SearchAlbumView_ItemClick;
                }
                break;
            case 26: // SearchPage.xaml line 92
                {
                    global::SMPlayer.IconTextButton element26 = (global::SMPlayer.IconTextButton)(target);
                    ((global::SMPlayer.IconTextButton)element26).Tapped += this.ViewAllButton_Tapped;
                }
                break;
            case 27: // SearchPage.xaml line 57
                {
                    this.SearchArtistsView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 31: // SearchPage.xaml line 50
                {
                    global::SMPlayer.IconTextButton element31 = (global::SMPlayer.IconTextButton)(target);
                    ((global::SMPlayer.IconTextButton)element31).Tapped += this.ViewAllButton_Tapped;
                }
                break;
            case 32: // SearchPage.xaml line 42
                {
                    this.NoResultTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // SearchPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    SearchPage_obj1_Bindings bindings = new SearchPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 9: // SearchPage.xaml line 150
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element9 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    SearchPage_obj9_Bindings bindings = new SearchPage_obj9_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element9.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element9.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element9, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element9, bindings);
                }
                break;
            case 29: // SearchPage.xaml line 63
                {                    
                    global::Windows.UI.Xaml.Controls.StackPanel element29 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                    SearchPage_obj29_Bindings bindings = new SearchPage_obj29_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element29.DataContext);
                    element29.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element29, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element29, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

