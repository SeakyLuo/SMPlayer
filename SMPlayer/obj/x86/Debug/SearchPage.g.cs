#pragma checksum "C:\Users\Seaky\source\repos\SMPlayer\SMPlayer\SearchPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "8B7A7BBB67FC1E6F941DE94C478339B4"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMPlayer
{
    partial class SearchPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_SMPlayer_PlaylistControl_ItemsSource(global::SMPlayer.PlaylistControl obj, global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>), targetNullValue);
                }
                obj.ItemsSource = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SearchPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISearchPage_Bindings
        {
            private global::SMPlayer.SearchPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.StackPanel obj17;
            private global::Windows.UI.Xaml.Controls.StackPanel obj18;
            private global::Windows.UI.Xaml.Controls.StackPanel obj19;
            private global::Windows.UI.Xaml.Controls.StackPanel obj20;
            private global::Windows.UI.Xaml.Controls.ListView obj21;
            private global::SMPlayer.PlaylistControl obj26;
            private global::Windows.UI.Xaml.Controls.ListView obj30;
            private global::Windows.UI.Xaml.Controls.ListView obj35;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj17VisibilityDisabled = false;
            private static bool isobj18VisibilityDisabled = false;
            private static bool isobj19VisibilityDisabled = false;
            private static bool isobj20VisibilityDisabled = false;
            private static bool isobj21ItemsSourceDisabled = false;
            private static bool isobj26ItemsSourceDisabled = false;
            private static bool isobj30ItemsSourceDisabled = false;
            private static bool isobj35ItemsSourceDisabled = false;

            private SearchPage_obj1_BindingsTracking bindingsTracking;

            public SearchPage_obj1_Bindings()
            {
                this.bindingsTracking = new SearchPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 154 && columnNumber == 25)
                {
                    isobj17VisibilityDisabled = true;
                }
                else if (lineNumber == 189 && columnNumber == 39)
                {
                    isobj18VisibilityDisabled = true;
                }
                else if (lineNumber == 224 && columnNumber == 39)
                {
                    isobj19VisibilityDisabled = true;
                }
                else if (lineNumber == 262 && columnNumber == 39)
                {
                    isobj20VisibilityDisabled = true;
                }
                else if (lineNumber == 288 && columnNumber == 21)
                {
                    isobj21ItemsSourceDisabled = true;
                }
                else if (lineNumber == 259 && columnNumber == 21)
                {
                    isobj26ItemsSourceDisabled = true;
                }
                else if (lineNumber == 215 && columnNumber == 21)
                {
                    isobj30ItemsSourceDisabled = true;
                }
                else if (lineNumber == 180 && columnNumber == 21)
                {
                    isobj35ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 17: // SearchPage.xaml line 154
                        this.obj17 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 18: // SearchPage.xaml line 189
                        this.obj18 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 19: // SearchPage.xaml line 224
                        this.obj19 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 20: // SearchPage.xaml line 262
                        this.obj20 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 21: // SearchPage.xaml line 285
                        this.obj21 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 26: // SearchPage.xaml line 255
                        this.obj26 = (global::SMPlayer.PlaylistControl)target;
                        break;
                    case 30: // SearchPage.xaml line 212
                        this.obj30 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 35: // SearchPage.xaml line 177
                        this.obj35 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ISearchPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SMPlayer.SearchPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SMPlayer.SearchPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Artists(obj.Artists, phase);
                        this.Update_Albums(obj.Albums, phase);
                        this.Update_Songs(obj.Songs, phase);
                        this.Update_Playlists(obj.Playlists, phase);
                    }
                }
            }
            private void Update_Artists(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Artists(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Artists_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 177
                    if (!isobj35ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj35, obj, null);
                    }
                }
            }
            private void Update_Artists_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 154
                    if (!isobj17VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj17, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Albums(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Albums(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Albums_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 212
                    if (!isobj30ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj30, obj, null);
                    }
                }
            }
            private void Update_Albums_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 189
                    if (!isobj18VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj18, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Songs(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Songs(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Songs_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 255
                    if (!isobj26ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_SMPlayer_PlaylistControl_ItemsSource(this.obj26, obj, null);
                    }
                }
            }
            private void Update_Songs_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 224
                    if (!isobj19VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj19, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Playlists(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Playlists(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Playlists_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 285
                    if (!isobj21ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj21, obj, null);
                    }
                }
            }
            private void Update_Playlists_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // SearchPage.xaml line 262
                    if (!isobj20VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj20, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SearchPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<SearchPage_obj1_Bindings> weakRefToBindingObj; 

                public SearchPage_obj1_BindingsTracking(SearchPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SearchPage_obj1_Bindings>(obj);
                }

                public SearchPage_obj1_Bindings TryGetBindingObject()
                {
                    SearchPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_Artists(null);
                    UpdateChildListeners_Albums(null);
                    UpdateChildListeners_Songs(null);
                    UpdateChildListeners_Playlists(null);
                }

                public void PropertyChanged_Artists(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Artists_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Artists_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Artists(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist>;
                if (obj != null)
                {
                    bindings.Update_Artists_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> cache_Artists = null;
                public void UpdateChildListeners_Artists(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Playlist> obj)
                {
                    if (obj != cache_Artists)
                    {
                        if (cache_Artists != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Artists).PropertyChanged -= PropertyChanged_Artists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Artists).CollectionChanged -= CollectionChanged_Artists;
                            cache_Artists = null;
                        }
                        if (obj != null)
                        {
                            cache_Artists = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Artists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Artists;
                        }
                    }
                }
                public void PropertyChanged_Albums(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Albums_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Albums_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Albums(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView>;
                if (obj != null)
                {
                    bindings.Update_Albums_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> cache_Albums = null;
                public void UpdateChildListeners_Albums(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj)
                {
                    if (obj != cache_Albums)
                    {
                        if (cache_Albums != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Albums).PropertyChanged -= PropertyChanged_Albums;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Albums).CollectionChanged -= CollectionChanged_Albums;
                            cache_Albums = null;
                        }
                        if (obj != null)
                        {
                            cache_Albums = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Albums;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Albums;
                        }
                    }
                }
                public void PropertyChanged_Songs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Songs(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>;
                if (obj != null)
                {
                    bindings.Update_Songs_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> cache_Songs = null;
                public void UpdateChildListeners_Songs(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj)
                {
                    if (obj != cache_Songs)
                    {
                        if (cache_Songs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Songs).PropertyChanged -= PropertyChanged_Songs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Songs).CollectionChanged -= CollectionChanged_Songs;
                            cache_Songs = null;
                        }
                        if (obj != null)
                        {
                            cache_Songs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Songs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Songs;
                        }
                    }
                }
                public void PropertyChanged_Playlists(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Playlists_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Playlists_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Playlists(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SearchPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView>;
                if (obj != null)
                {
                    bindings.Update_Playlists_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> cache_Playlists = null;
                public void UpdateChildListeners_Playlists(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj)
                {
                    if (obj != cache_Playlists)
                    {
                        if (cache_Playlists != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Playlists).PropertyChanged -= PropertyChanged_Playlists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Playlists).CollectionChanged -= CollectionChanged_Playlists;
                            cache_Playlists = null;
                        }
                        if (obj != null)
                        {
                            cache_Playlists = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Playlists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Playlists;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // SearchPage.xaml line 1
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)(target);
                    ((global::Windows.UI.Xaml.Controls.Page)element1).Loaded += this.Page_Loaded;
                }
                break;
            case 15: // SearchPage.xaml line 144
                {
                    this.NoResultTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 16: // SearchPage.xaml line 150
                {
                    this.LoadingProgress = (global::Windows.UI.Xaml.Controls.ProgressBar)(target);
                }
                break;
            case 21: // SearchPage.xaml line 285
                {
                    this.SearchPlaylistView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.SearchPlaylistView).ItemClick += this.SearchPlaylistView_ItemClick;
                }
                break;
            case 23: // SearchPage.xaml line 292
                {
                    global::SMPlayer.DropShadowControl element23 = (global::SMPlayer.DropShadowControl)(target);
                    ((global::SMPlayer.DropShadowControl)element23).DataContextChanged += this.Album_DataContextChanged;
                }
                break;
            case 24: // SearchPage.xaml line 271
                {
                    this.PlaylistsDropdown = (global::Windows.UI.Xaml.Controls.DropDownButton)(target);
                    ((global::Windows.UI.Xaml.Controls.DropDownButton)this.PlaylistsDropdown).Click += this.PlaylistsDropdown_Click;
                }
                break;
            case 25: // SearchPage.xaml line 278
                {
                    this.PlaylistsViewAllButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.PlaylistsViewAllButton).Click += this.PlaylistsViewAllButton_Click;
                }
                break;
            case 26: // SearchPage.xaml line 255
                {
                    this.SearchMusicView = (global::SMPlayer.PlaylistControl)(target);
                }
                break;
            case 27: // SearchPage.xaml line 234
                {
                    this.SongsDropdown = (global::Windows.UI.Xaml.Controls.DropDownButton)(target);
                    ((global::Windows.UI.Xaml.Controls.DropDownButton)this.SongsDropdown).Click += this.SongsDropdown_Click;
                }
                break;
            case 28: // SearchPage.xaml line 242
                {
                    this.AddToButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.AddToButton).Click += this.AddToButton_Click;
                }
                break;
            case 29: // SearchPage.xaml line 248
                {
                    this.SongsViewAllButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.SongsViewAllButton).Click += this.SongsViewAllButton_Click;
                }
                break;
            case 30: // SearchPage.xaml line 212
                {
                    this.SearchAlbumView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.SearchAlbumView).ItemClick += this.SearchAlbumView_ItemClick;
                }
                break;
            case 32: // SearchPage.xaml line 219
                {
                    global::SMPlayer.DropShadowControl element32 = (global::SMPlayer.DropShadowControl)(target);
                    ((global::SMPlayer.DropShadowControl)element32).DataContextChanged += this.Album_DataContextChanged;
                }
                break;
            case 33: // SearchPage.xaml line 198
                {
                    this.AlbumsDropdown = (global::Windows.UI.Xaml.Controls.DropDownButton)(target);
                    ((global::Windows.UI.Xaml.Controls.DropDownButton)this.AlbumsDropdown).Click += this.AlbumsDropdown_Click;
                }
                break;
            case 34: // SearchPage.xaml line 205
                {
                    this.AlbumsViewAllButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.AlbumsViewAllButton).Click += this.AlbumsViewAllButton_Click;
                }
                break;
            case 35: // SearchPage.xaml line 177
                {
                    this.SearchArtistView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.SearchArtistView).ItemClick += this.SearchArtistView_ItemClick;
                }
                break;
            case 38: // SearchPage.xaml line 163
                {
                    this.ArtistsDropdown = (global::Windows.UI.Xaml.Controls.DropDownButton)(target);
                    ((global::Windows.UI.Xaml.Controls.DropDownButton)this.ArtistsDropdown).Click += this.ArtistsDropdown_Click;
                }
                break;
            case 39: // SearchPage.xaml line 170
                {
                    this.ArtistsViewAllButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.ArtistsViewAllButton).Click += this.ArtistsViewAllButton_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // SearchPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    SearchPage_obj1_Bindings bindings = new SearchPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

