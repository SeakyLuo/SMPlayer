#pragma checksum "C:\Users\Seaky\source\repos\SMPlayer\SMPlayer\ArtistsPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A1D8C4F396F27FFA860620299566A2A1"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMPlayer
{
    partial class ArtistsPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToolTipService_ToolTip(global::Windows.UI.Xaml.DependencyObject obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                global::Windows.UI.Xaml.Controls.ToolTipService.SetToolTip(obj, value);
            }
            public static void Set_SMPlayer_ScrollingTextBlock_Text(global::SMPlayer.ScrollingTextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ArtistsPage_obj6_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IArtistsPage_Bindings
        {
            private global::SMPlayer.Models.ArtistView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj6;
            private global::SMPlayer.ScrollingTextBlock obj8;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj6ToolTipDisabled = false;
            private static bool isobj8TextDisabled = false;

            private ArtistsPage_obj6_BindingsTracking bindingsTracking;

            public ArtistsPage_obj6_Bindings()
            {
                this.bindingsTracking = new ArtistsPage_obj6_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 65 && columnNumber == 25)
                {
                    isobj6ToolTipDisabled = true;
                }
                else if (lineNumber == 80 && columnNumber == 29)
                {
                    isobj8TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // ArtistsPage.xaml line 58
                        this.obj6 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.StackPanel)target);
                        break;
                    case 8: // ArtistsPage.xaml line 76
                        this.obj8 = (global::SMPlayer.ScrollingTextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj6.Target as global::Windows.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::SMPlayer.Models.ArtistView) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IArtistsPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SMPlayer.Models.ArtistView)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SMPlayer.Models.ArtistView obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 58
                    if (!isobj6ToolTipDisabled)
                    {
                        if ((this.obj6.Target as global::Windows.UI.Xaml.Controls.StackPanel) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToolTipService_ToolTip((this.obj6.Target as global::Windows.UI.Xaml.Controls.StackPanel), (global::System.Object)this.LookupConverter("EmptyStringConverter").Convert(obj, typeof(global::System.Object), "UnknownArtist", null), null);
                        }
                    }
                    // ArtistsPage.xaml line 76
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_SMPlayer_ScrollingTextBlock_Text(this.obj8, (global::System.String)this.LookupConverter("EmptyStringConverter").Convert(obj, typeof(global::System.String), "UnknownArtist", null), null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ArtistsPage_obj6_BindingsTracking
            {
                private global::System.WeakReference<ArtistsPage_obj6_Bindings> weakRefToBindingObj; 

                public ArtistsPage_obj6_BindingsTracking(ArtistsPage_obj6_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ArtistsPage_obj6_Bindings>(obj);
                }

                public ArtistsPage_obj6_Bindings TryGetBindingObject()
                {
                    ArtistsPage_obj6_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistsPage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SMPlayer.Models.ArtistView obj = sender as global::SMPlayer.Models.ArtistView;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::SMPlayer.Models.ArtistView obj)
                {
                    ArtistsPage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ArtistsPage_obj22_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IArtistsPage_Bindings
        {
            private global::SMPlayer.Models.Music dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj22;
            private global::Windows.UI.Xaml.Controls.TextBlock obj25;
            private global::Windows.UI.Xaml.Controls.FontIcon obj26;
            private global::Windows.UI.Xaml.Controls.TextBlock obj27;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj25ForegroundDisabled = false;
            private static bool isobj25TextDisabled = false;
            private static bool isobj26VisibilityDisabled = false;
            private static bool isobj27ForegroundDisabled = false;
            private static bool isobj27TextDisabled = false;

            private ArtistsPage_obj22_BindingsTracking bindingsTracking;

            public ArtistsPage_obj22_Bindings()
            {
                this.bindingsTracking = new ArtistsPage_obj22_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 228 && columnNumber == 57)
                {
                    isobj25ForegroundDisabled = true;
                }
                else if (lineNumber == 229 && columnNumber == 57)
                {
                    isobj25TextDisabled = true;
                }
                else if (lineNumber == 218 && columnNumber == 61)
                {
                    isobj26VisibilityDisabled = true;
                }
                else if (lineNumber == 222 && columnNumber == 61)
                {
                    isobj27ForegroundDisabled = true;
                }
                else if (lineNumber == 223 && columnNumber == 61)
                {
                    isobj27TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 22: // ArtistsPage.xaml line 201
                        this.obj22 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 25: // ArtistsPage.xaml line 225
                        this.obj25 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 26: // ArtistsPage.xaml line 211
                        this.obj26 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 27: // ArtistsPage.xaml line 219
                        this.obj27 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj22.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::SMPlayer.Models.Music) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IArtistsPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SMPlayer.Models.Music)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SMPlayer.Models.Music obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_IsPlaying(obj.IsPlaying, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Duration(obj.Duration, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_IsPlaying(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 225
                    if (!isobj25ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj25, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("RowColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                    // ArtistsPage.xaml line 211
                    if (!isobj26VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj26, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                    // ArtistsPage.xaml line 219
                    if (!isobj27ForegroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj27, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("RowColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                }
            }
            private void Update_Duration(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ArtistsPage.xaml line 225
                    if (!isobj25TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj25, (global::System.String)this.LookupConverter("MusicDurationConverter").Convert(obj, typeof(global::System.String), null, null), null);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 219
                    if (!isobj27TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj27, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ArtistsPage_obj22_BindingsTracking
            {
                private global::System.WeakReference<ArtistsPage_obj22_Bindings> weakRefToBindingObj; 

                public ArtistsPage_obj22_BindingsTracking(ArtistsPage_obj22_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ArtistsPage_obj22_Bindings>(obj);
                }

                public ArtistsPage_obj22_Bindings TryGetBindingObject()
                {
                    ArtistsPage_obj22_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistsPage_obj22_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SMPlayer.Models.Music obj = sender as global::SMPlayer.Models.Music;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_IsPlaying(obj.IsPlaying, DATA_CHANGED);
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsPlaying":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsPlaying(obj.IsPlaying, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::SMPlayer.Models.Music obj)
                {
                    ArtistsPage_obj22_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ArtistsPage_obj19_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IArtistsPage_Bindings
        {
            private global::SMPlayer.Models.AlbumView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj19;
            private global::Windows.UI.Xaml.Controls.ListView obj20;
            private global::Windows.UI.Xaml.Controls.Image obj28;
            private global::Windows.UI.Xaml.Controls.TextBlock obj31;
            private global::Windows.UI.Xaml.Controls.TextBlock obj32;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj20ItemsSourceDisabled = false;
            private static bool isobj28SourceDisabled = false;
            private static bool isobj31TextDisabled = false;
            private static bool isobj31ToolTipDisabled = false;
            private static bool isobj32TextDisabled = false;

            private ArtistsPage_obj19_BindingsTracking bindingsTracking;

            public ArtistsPage_obj19_Bindings()
            {
                this.bindingsTracking = new ArtistsPage_obj19_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 197 && columnNumber == 41)
                {
                    isobj20ItemsSourceDisabled = true;
                }
                else if (lineNumber == 163 && columnNumber == 45)
                {
                    isobj28SourceDisabled = true;
                }
                else if (lineNumber == 173 && columnNumber == 49)
                {
                    isobj31TextDisabled = true;
                }
                else if (lineNumber == 175 && columnNumber == 49)
                {
                    isobj31ToolTipDisabled = true;
                }
                else if (lineNumber == 176 && columnNumber == 70)
                {
                    isobj32TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 19: // ArtistsPage.xaml line 150
                        this.obj19 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 20: // ArtistsPage.xaml line 190
                        this.obj20 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 28: // ArtistsPage.xaml line 156
                        this.obj28 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 31: // ArtistsPage.xaml line 168
                        this.obj31 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 32: // ArtistsPage.xaml line 176
                        this.obj32 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj19.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::SMPlayer.Models.AlbumView) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IArtistsPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SMPlayer.Models.AlbumView)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SMPlayer.Models.AlbumView obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Songs(obj.Songs, phase);
                        this.Update_Thumbnail(obj.Thumbnail, phase);
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Songs(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Songs(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 190
                    if (!isobj20ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj20, obj, null);
                    }
                    // ArtistsPage.xaml line 176
                    if (!isobj32TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj32, (global::System.String)this.LookupConverter("SongCountConverter").Convert(obj, typeof(global::System.String), null, null), null);
                    }
                }
            }
            private void Update_Thumbnail(global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 156
                    if (!isobj28SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj28, obj, null);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 168
                    if (!isobj31TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj31, (global::System.String)this.LookupConverter("EmptyStringConverter").Convert(obj, typeof(global::System.String), "UnknownAlbum", null), null);
                    }
                    // ArtistsPage.xaml line 168
                    if (!isobj31ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj31, (global::System.Object)this.LookupConverter("EmptyStringConverter").Convert(obj, typeof(global::System.Object), "UnknownAlbum", null), null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ArtistsPage_obj19_BindingsTracking
            {
                private global::System.WeakReference<ArtistsPage_obj19_Bindings> weakRefToBindingObj; 

                public ArtistsPage_obj19_BindingsTracking(ArtistsPage_obj19_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ArtistsPage_obj19_Bindings>(obj);
                }

                public ArtistsPage_obj19_Bindings TryGetBindingObject()
                {
                    ArtistsPage_obj19_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Songs(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistsPage_obj19_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SMPlayer.Models.AlbumView obj = sender as global::SMPlayer.Models.AlbumView;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Songs(obj.Songs, DATA_CHANGED);
                                bindings.Update_Thumbnail(obj.Thumbnail, DATA_CHANGED);
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Songs":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Songs(obj.Songs, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Thumbnail":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Thumbnail(obj.Thumbnail, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::SMPlayer.Models.AlbumView obj)
                {
                    ArtistsPage_obj19_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Songs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistsPage_obj19_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Songs(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ArtistsPage_obj19_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> cache_Songs = null;
                public void UpdateChildListeners_Songs(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.Music> obj)
                {
                    if (obj != cache_Songs)
                    {
                        if (cache_Songs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Songs).PropertyChanged -= PropertyChanged_Songs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Songs).CollectionChanged -= CollectionChanged_Songs;
                            cache_Songs = null;
                        }
                        if (obj != null)
                        {
                            cache_Songs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Songs;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Songs;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ArtistsPage_obj10_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IArtistsPage_Bindings
        {
            private global::SMPlayer.Models.ArtistView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj10;
            private global::Windows.UI.Xaml.Controls.ProgressBar obj14;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj10ItemsSourceDisabled = false;
            private static bool isobj14VisibilityDisabled = false;
            private static bool isobj16TextDisabled = false;
            private static bool isobj16ToolTipDisabled = false;
            private static bool isobj17TextDisabled = false;

            private ArtistsPage_obj10_BindingsTracking bindingsTracking;

            public ArtistsPage_obj10_Bindings()
            {
                this.bindingsTracking = new ArtistsPage_obj10_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 90 && columnNumber == 25)
                {
                    isobj10ItemsSourceDisabled = true;
                }
                else if (lineNumber == 129 && columnNumber == 41)
                {
                    isobj14VisibilityDisabled = true;
                }
                else if (lineNumber == 104 && columnNumber == 45)
                {
                    isobj16TextDisabled = true;
                }
                else if (lineNumber == 106 && columnNumber == 45)
                {
                    isobj16ToolTipDisabled = true;
                }
                else if (lineNumber == 110 && columnNumber == 45)
                {
                    isobj17TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10: // ArtistsPage.xaml line 86
                        this.obj10 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.ListView)target);
                        break;
                    case 14: // ArtistsPage.xaml line 124
                        this.obj14 = (global::Windows.UI.Xaml.Controls.ProgressBar)target;
                        break;
                    case 16: // ArtistsPage.xaml line 100
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17: // ArtistsPage.xaml line 107
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj10.Target as global::Windows.UI.Xaml.Controls.ListView).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::SMPlayer.Models.ArtistView) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IArtistsPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SMPlayer.Models.ArtistView)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SMPlayer.Models.ArtistView obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Albums(obj.Albums, phase);
                        this.Update_NotLoaded(obj.NotLoaded, phase);
                        this.Update_Name(obj.Name, phase);
                        this.Update_ArtistInfo(obj.ArtistInfo, phase);
                    }
                }
            }
            private void Update_Albums(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Albums(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 86
                    if (!isobj10ItemsSourceDisabled)
                    {
                        if ((this.obj10.Target as global::Windows.UI.Xaml.Controls.ListView) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource((this.obj10.Target as global::Windows.UI.Xaml.Controls.ListView), obj, null);
                        }
                    }
                }
            }
            private void Update_NotLoaded(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 124
                    if (!isobj14VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 100
                    if (!isobj16TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                    }
                    // ArtistsPage.xaml line 100
                    if (!isobj16ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj16, obj, null);
                    }
                }
            }
            private void Update_ArtistInfo(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 107
                    if (!isobj17TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ArtistsPage_obj10_BindingsTracking
            {
                private global::System.WeakReference<ArtistsPage_obj10_Bindings> weakRefToBindingObj; 

                public ArtistsPage_obj10_BindingsTracking(ArtistsPage_obj10_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ArtistsPage_obj10_Bindings>(obj);
                }

                public ArtistsPage_obj10_Bindings TryGetBindingObject()
                {
                    ArtistsPage_obj10_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Albums(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistsPage_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SMPlayer.Models.ArtistView obj = sender as global::SMPlayer.Models.ArtistView;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Albums(obj.Albums, DATA_CHANGED);
                                bindings.Update_NotLoaded(obj.NotLoaded, DATA_CHANGED);
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_ArtistInfo(obj.ArtistInfo, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Albums":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Albums(obj.Albums, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NotLoaded":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NotLoaded(obj.NotLoaded, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ArtistInfo":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ArtistInfo(obj.ArtistInfo, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::SMPlayer.Models.ArtistView obj)
                {
                    ArtistsPage_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Albums(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistsPage_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Albums(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ArtistsPage_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> cache_Albums = null;
                public void UpdateChildListeners_Albums(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.AlbumView> obj)
                {
                    if (obj != cache_Albums)
                    {
                        if (cache_Albums != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Albums).PropertyChanged -= PropertyChanged_Albums;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Albums).CollectionChanged -= CollectionChanged_Albums;
                            cache_Albums = null;
                        }
                        if (obj != null)
                        {
                            cache_Albums = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Albums;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Albums;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ArtistsPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IArtistsPage_Bindings
        {
            private global::SMPlayer.ArtistsPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.Toolkit.Uwp.UI.Controls.MasterDetailsView obj2;
            private global::Windows.UI.Xaml.Controls.AutoSuggestBox obj3;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2ItemsSourceDisabled = false;
            private static bool isobj3ItemsSourceDisabled = false;

            private ArtistsPage_obj1_BindingsTracking bindingsTracking;

            public ArtistsPage_obj1_Bindings()
            {
                this.bindingsTracking = new ArtistsPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 36 && columnNumber == 13)
                {
                    isobj2ItemsSourceDisabled = true;
                }
                else if (lineNumber == 45 && columnNumber == 25)
                {
                    isobj3ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // ArtistsPage.xaml line 31
                        this.obj2 = (global::Microsoft.Toolkit.Uwp.UI.Controls.MasterDetailsView)target;
                        break;
                    case 3: // ArtistsPage.xaml line 39
                        this.obj3 = (global::Windows.UI.Xaml.Controls.AutoSuggestBox)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IArtistsPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::SMPlayer.ArtistsPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SMPlayer.ArtistsPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Artists(obj.Artists, phase);
                        this.Update_Suggestions(obj.Suggestions, phase);
                    }
                }
            }
            private void Update_Artists(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.ArtistView> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Artists(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 31
                    if (!isobj2ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj2, obj, null);
                    }
                }
            }
            private void Update_Suggestions(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Suggestions(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ArtistsPage.xaml line 39
                    if (!isobj3ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj3, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ArtistsPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<ArtistsPage_obj1_Bindings> weakRefToBindingObj; 

                public ArtistsPage_obj1_BindingsTracking(ArtistsPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ArtistsPage_obj1_Bindings>(obj);
                }

                public ArtistsPage_obj1_Bindings TryGetBindingObject()
                {
                    ArtistsPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_Artists(null);
                    UpdateChildListeners_Suggestions(null);
                }

                public void PropertyChanged_Artists(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistsPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.ArtistView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.ArtistView>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Artists(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ArtistsPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.ArtistView> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.ArtistView>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.ArtistView> cache_Artists = null;
                public void UpdateChildListeners_Artists(global::System.Collections.ObjectModel.ObservableCollection<global::SMPlayer.Models.ArtistView> obj)
                {
                    if (obj != cache_Artists)
                    {
                        if (cache_Artists != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Artists).PropertyChanged -= PropertyChanged_Artists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Artists).CollectionChanged -= CollectionChanged_Artists;
                            cache_Artists = null;
                        }
                        if (obj != null)
                        {
                            cache_Artists = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Artists;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Artists;
                        }
                    }
                }
                public void PropertyChanged_Suggestions(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistsPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Suggestions(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ArtistsPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::System.String> cache_Suggestions = null;
                public void UpdateChildListeners_Suggestions(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj)
                {
                    if (obj != cache_Suggestions)
                    {
                        if (cache_Suggestions != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Suggestions).PropertyChanged -= PropertyChanged_Suggestions;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Suggestions).CollectionChanged -= CollectionChanged_Suggestions;
                            cache_Suggestions = null;
                        }
                        if (obj != null)
                        {
                            cache_Suggestions = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Suggestions;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Suggestions;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // ArtistsPage.xaml line 1
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)(target);
                    ((global::Windows.UI.Xaml.Controls.Page)element1).Loaded += this.Page_Loaded;
                }
                break;
            case 2: // ArtistsPage.xaml line 31
                {
                    this.ArtistMasterDetailsView = (global::Microsoft.Toolkit.Uwp.UI.Controls.MasterDetailsView)(target);
                }
                break;
            case 3: // ArtistsPage.xaml line 39
                {
                    this.ArtistSearchBox = (global::Windows.UI.Xaml.Controls.AutoSuggestBox)(target);
                    ((global::Windows.UI.Xaml.Controls.AutoSuggestBox)this.ArtistSearchBox).KeyUp += this.ArtistSearchBox_KeyUp;
                    ((global::Windows.UI.Xaml.Controls.AutoSuggestBox)this.ArtistSearchBox).SuggestionChosen += this.ArtistSearchBox_SuggestionChosen;
                    ((global::Windows.UI.Xaml.Controls.AutoSuggestBox)this.ArtistSearchBox).TextChanged += this.ArtistSearchBox_TextChanged;
                }
                break;
            case 4: // ArtistsPage.xaml line 50
                {
                    this.LoadingProgress = (global::Windows.UI.Xaml.Controls.ProgressBar)(target);
                }
                break;
            case 6: // ArtistsPage.xaml line 58
                {
                    global::Windows.UI.Xaml.Controls.StackPanel element6 = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                    ((global::Windows.UI.Xaml.Controls.StackPanel)element6).PointerEntered += this.Artist_PointerEntered;
                    ((global::Windows.UI.Xaml.Controls.StackPanel)element6).Tapped += this.Artist_Tapped;
                }
                break;
            case 7: // ArtistsPage.xaml line 67
                {
                    global::Windows.UI.Xaml.Controls.MenuFlyout element7 = (global::Windows.UI.Xaml.Controls.MenuFlyout)(target);
                    ((global::Windows.UI.Xaml.Controls.MenuFlyout)element7).Opening += this.ArtistMenuFlyout_Opening;
                }
                break;
            case 15: // ArtistsPage.xaml line 121
                {
                    global::Windows.UI.Xaml.Controls.MenuFlyout element15 = (global::Windows.UI.Xaml.Controls.MenuFlyout)(target);
                    ((global::Windows.UI.Xaml.Controls.MenuFlyout)element15).Opening += this.ArtistMenuFlyout_Opening;
                }
                break;
            case 20: // ArtistsPage.xaml line 190
                {
                    global::Windows.UI.Xaml.Controls.ListView element20 = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)element20).ContainerContentChanging += this.SongsListView_ContainerContentChanging;
                    ((global::Windows.UI.Xaml.Controls.ListView)element20).ItemClick += this.SongsListView_ItemClick;
                }
                break;
            case 23: // ArtistsPage.xaml line 203
                {
                    global::Windows.UI.Xaml.Controls.MenuFlyout element23 = (global::Windows.UI.Xaml.Controls.MenuFlyout)(target);
                    ((global::Windows.UI.Xaml.Controls.MenuFlyout)element23).Opening += this.OpenMusicMenuFlyout;
                }
                break;
            case 28: // ArtistsPage.xaml line 156
                {
                    global::Windows.UI.Xaml.Controls.Image element28 = (global::Windows.UI.Xaml.Controls.Image)(target);
                    ((global::Windows.UI.Xaml.Controls.Image)element28).DataContextChanged += this.AlbumCover_DataContextChanged;
                }
                break;
            case 30: // ArtistsPage.xaml line 186
                {
                    global::Windows.UI.Xaml.Controls.MenuFlyout element30 = (global::Windows.UI.Xaml.Controls.MenuFlyout)(target);
                    ((global::Windows.UI.Xaml.Controls.MenuFlyout)element30).Opening += this.AlbumMenuFlyout_Opening;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // ArtistsPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    ArtistsPage_obj1_Bindings bindings = new ArtistsPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 6: // ArtistsPage.xaml line 58
                {                    
                    global::Windows.UI.Xaml.Controls.StackPanel element6 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                    ArtistsPage_obj6_Bindings bindings = new ArtistsPage_obj6_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element6.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element6.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element6, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element6, bindings);
                }
                break;
            case 10: // ArtistsPage.xaml line 86
                {                    
                    global::Windows.UI.Xaml.Controls.ListView element10 = (global::Windows.UI.Xaml.Controls.ListView)target;
                    ArtistsPage_obj10_Bindings bindings = new ArtistsPage_obj10_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element10.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element10.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element10, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element10, bindings);
                }
                break;
            case 19: // ArtistsPage.xaml line 150
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element19 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    ArtistsPage_obj19_Bindings bindings = new ArtistsPage_obj19_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element19.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element19.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element19, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element19, bindings);
                }
                break;
            case 22: // ArtistsPage.xaml line 201
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element22 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    ArtistsPage_obj22_Bindings bindings = new ArtistsPage_obj22_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element22.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element22.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element22, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element22, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

