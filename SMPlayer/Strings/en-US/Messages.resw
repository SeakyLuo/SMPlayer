<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Albums:" xml:space="preserve">
    <value>Albums: </value>
  </data>
  <data name="ChangesSaved" xml:space="preserve">
    <value>Changes has been saved.</value>
  </data>
  <data name="CheckNewMusicResult" xml:space="preserve">
    <value>Music added: {0}, removed: {1}.</value>
  </data>
  <data name="ClearPlayHistory" xml:space="preserve">
    <value>Do you want to clear your play history?</value>
  </data>
  <data name="ClearPlaylist" xml:space="preserve">
    <value>Do you want to clear playlist "{0}"?</value>
  </data>
  <data name="ClearSearchHistory" xml:space="preserve">
    <value>Do you want to clear your search history?</value>
  </data>
  <data name="Comma" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="DeleteMusic" xml:space="preserve">
    <value>Delete "{0}"</value>
  </data>
  <data name="DeleteMusicMessage" xml:space="preserve">
    <value>You are deleting "{0}" from your device.\nThis operation is irrevertible.\nDo you want to continue?</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>There is an error.</value>
  </data>
  <data name="Folders" xml:space="preserve">
    <value>Folders ({0})</value>
  </data>
  <data name="Folders:" xml:space="preserve">
    <value>Folders: </value>
  </data>
  <data name="HasBeenPlayed" xml:space="preserve">
    <value>"{0}" has been played {1} {2}.</value>
  </data>
  <data name="ItemRemoved" xml:space="preserve">
    <value>"{0}" is removed</value>
  </data>
  <data name="LoadMusicLibrary" xml:space="preserve">
    <value>Loading music library...</value>
  </data>
  <data name="Lyrics" xml:space="preserve">
    <value>lryics</value>
  </data>
  <data name="LyricsReset" xml:space="preserve">
    <value>Lyrics is reset!</value>
  </data>
  <data name="LyricsUpdated" xml:space="preserve">
    <value>Lyrics is updated!</value>
  </data>
  <data name="MusicDeleted" xml:space="preserve">
    <value>"{0}" is deleted!</value>
  </data>
  <data name="MusicName" xml:space="preserve">
    <value> "{0}"</value>
  </data>
  <data name="MusicNoAlbumArt" xml:space="preserve">
    <value>"{0}" does not have album art!</value>
  </data>
  <data name="MusicNotFound" xml:space="preserve">
    <value>"{0}" cannot be found.</value>
  </data>
  <data name="MusicRemoved" xml:space="preserve">
    <value>"{0}" is removed</value>
  </data>
  <data name="MusicsNotFound" xml:space="preserve">
    <value>Skipped {0} songs as they cannot be found.</value>
  </data>
  <data name="NamingErrorEmptyOrWhiteSpace" xml:space="preserve">
    <value>Playlist name cannot be empty or whitespaces!</value>
  </data>
  <data name="NamingErrorSpecial" xml:space="preserve">
    <value>Playlist name cannot contain "+++++" or "{0}"!</value>
  </data>
  <data name="NamingErrorTooLong" xml:space="preserve">
    <value>Playlist name cannot have more than 50 characters!</value>
  </data>
  <data name="NamingErrorUsed" xml:space="preserve">
    <value>This name has been used!</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="No Music" xml:space="preserve">
    <value>No Music</value>
  </data>
  <data name="No Playlist" xml:space="preserve">
    <value>No Playlist</value>
  </data>
  <data name="NoLyricsAvailable" xml:space="preserve">
    <value>No Lyrics Available</value>
  </data>
  <data name="NotPlayedYet" xml:space="preserve">
    <value>"{0}" has not been played yet.</value>
  </data>
  <data name="NowLoading" xml:space="preserve">
    <value>I am still loading. Please try later.</value>
  </data>
  <data name="OpenBrowserSuccessful" xml:space="preserve">
    <value>Fail to find matching lyrics. Open a web browser instead.</value>
  </data>
  <data name="Pause" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="Play" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="PlaylistName" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="PlaylistRemoved" xml:space="preserve">
    <value>"{0}" is removed</value>
  </data>
  <data name="Playlists:" xml:space="preserve">
    <value>Playlists: </value>
  </data>
  <data name="PostParenthesis" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="ProcessRequest" xml:space="preserve">
    <value>Processing your request......</value>
  </data>
  <data name="PropertiesReset" xml:space="preserve">
    <value>Properties is reset!</value>
  </data>
  <data name="PropertiesUpdated" xml:space="preserve">
    <value>Properties is updated!</value>
  </data>
  <data name="Quotations" xml:space="preserve">
    <value>"{0}"</value>
  </data>
  <data name="RemoveAlbumArt" xml:space="preserve">
    <value>Do you want to remove the album art of "{0}"?</value>
  </data>
  <data name="RemoveFromPlaylist" xml:space="preserve">
    <value>Remove "{0}" from playlist</value>
  </data>
  <data name="RemoveItem" xml:space="preserve">
    <value>Do you want to remove "{0}"?</value>
  </data>
  <data name="RemoveMusic" xml:space="preserve">
    <value>Do you want to remove "{0}" from your playlist?</value>
  </data>
  <data name="RemovePlaylist" xml:space="preserve">
    <value>Do you want to remove playlist "{0}"?</value>
  </data>
  <data name="Repeat One: Disabled" xml:space="preserve">
    <value>Repeat One: Disabled</value>
  </data>
  <data name="Repeat One: Enabled" xml:space="preserve">
    <value>Repeat One: Enabled</value>
  </data>
  <data name="Repeat: Disabled" xml:space="preserve">
    <value>Repeat: Disabled</value>
  </data>
  <data name="Repeat: Enabled" xml:space="preserve">
    <value>Repeat: Enabled</value>
  </data>
  <data name="Reverse Playlist" xml:space="preserve">
    <value>Reverse Playlist</value>
  </data>
  <data name="SearchEmpty" xml:space="preserve">
    <value>Search content cannot be empty!</value>
  </data>
  <data name="SearchLyricsFailed" xml:space="preserve">
    <value>Unable to find matching lyrics!</value>
  </data>
  <data name="SearchLyricsSuccessful" xml:space="preserve">
    <value>Matching lyrics were found! You need to save it yourself.</value>
  </data>
  <data name="SearchLyricsUrl" xml:space="preserve">
    <value>https://www.bing.com/search?q={0}+{1}+{2}</value>
  </data>
  <data name="SearchResult" xml:space="preserve">
    <value>Search Result of {0}</value>
  </data>
  <data name="Shuffle: Disabled" xml:space="preserve">
    <value>Shuffle: Disabled</value>
  </data>
  <data name="Shuffle: Enabled" xml:space="preserve">
    <value>Shuffle: Enabled</value>
  </data>
  <data name="Songs" xml:space="preserve">
    <value>Songs ({0})</value>
  </data>
  <data name="Songs:" xml:space="preserve">
    <value>Songs: </value>
  </data>
  <data name="Sort By Album" xml:space="preserve">
    <value>Sort By Album</value>
  </data>
  <data name="Sort By Artist" xml:space="preserve">
    <value>Sort By Artist</value>
  </data>
  <data name="Sort By Date Added" xml:space="preserve">
    <value>Sort By Date Added</value>
  </data>
  <data name="Sort By Default" xml:space="preserve">
    <value>Sort By Default</value>
  </data>
  <data name="Sort By Duration" xml:space="preserve">
    <value>Sort By Duration</value>
  </data>
  <data name="Sort By Name" xml:space="preserve">
    <value>Sort By Name</value>
  </data>
  <data name="Sort By Play Count" xml:space="preserve">
    <value>Sort By Play Count</value>
  </data>
  <data name="Sort By Title" xml:space="preserve">
    <value>Sort By Title</value>
  </data>
  <data name="UnableToChangeAlbumArt" xml:space="preserve">
    <value>Unable to change album art!</value>
  </data>
  <data name="UnknownAlbum" xml:space="preserve">
    <value>Unknown Album</value>
  </data>
  <data name="UnknownArtist" xml:space="preserve">
    <value>Unknown Artist</value>
  </data>
  <data name="UpdateMusicLibrary" xml:space="preserve">
    <value>Updating your music library......</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>